% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/seq_fuzzy_operations.R
\name{seq_crop_fuzzypattern}
\alias{seq_crop_fuzzypattern}
\title{Crop sequences using fuzzy delimiting patterns}
\usage{
seq_crop_fuzzypattern(
  x,
  pattern_in = NULL,
  pattern_out = NULL,
  max_dist_in = 0,
  max_dist_out = 0,
  include_patterns = TRUE
)
}
\arguments{
\item{x}{a DNA, RNA or AA vector to be cropped.}

\item{pattern_in}{a vector of patterns to be matched
against the sequences in \code{x}
and defining the beginning (left-side) of the returned
sequences. Pass \code{NULL} to avoid cropping.}

\item{pattern_out}{a vector of patterns to be matched
against the sequences in \code{x}
and defining the end (right-side) of the returned sequences.
Pass \code{NULL} to avoid cropping.}

\item{max_dist_in}{the maximum edit distance between the
sequence and the best matching \code{pattern_in}
i.e. maximum error allowed between the sequence and the patterns.
If the error rate is higher,
this will produce \code{NA}.}

\item{max_dist_out}{same for \code{pattern_out}.}

\item{include_patterns}{A logical. Should the patterns included
in the returned cropped sequences (default is \code{TRUE}).}
}
\value{
A character vector of cropped sequences.
}
\description{
This function extracts sub-sequences given two
patterns delimiting the cropping region.
This is useful to isolate a genetic region
from two sets of primers (like a PCR would do).
The function uses approximate string matching,
which allows to specify an error rate for pattern matching.
}
\details{
If \code{pattern_in}/\code{pattern_out} are DNA, RNA or AA vectors,
patterns sequences will be processed with \code{seq_disambiguate_IUPAC}.

Currently, ambiguities in the input sequences are ignored.
}
\section{Patterns}{

It is important to understand how patterns are treated in \pkg{bioseq}.

Patterns are recycled along the sequences (usually the \code{x} argument).
This means that if a pattern (vector or list) is of length > 1, it will be
replicated until it is the same length as \code{x}.
The reverse is not true and a vector of patterns longer than
a vector of sequences will raise a warning.

Patterns can be DNA, RNA or AA vectors
(but they must be from the same class as
the sequences they are matched against).
If patterns are DNA, RNA or AA vectors,
they are disambiguated prior to matching.
For example pattern dna("ARG") will match AAG or AGG.

Alternatively, patterns can be a simple character vector
containing regular expressions.

Vectors of patterns (DNA, RNA, AA or regex) can also be provided in a list.
In that case, each vector of the list will be collapsed prior matching,
which means that each vector element will be used as an alternative pattern.
For example pattern list(c("AAA", "CCC"), "GG")
will match AAA or CCC in the first sequence,
GG in the second sequence, AAA or CCC in the third,
and so on following the recycling rule.

 @section Fuzzy matching:
When \code{max_error} is greater than zero, the function perform
fuzzy matching. Fuzzy matching does not support regular expression.
}

\examples{
x <-as_dna(c("ACTGGTCAGCATTAGTGCTACTGTTACAGGT", "GCCCCTGCAATT", "AAAAGGGTTTTTTT"))


# If no match result will be NA
seq_crop_pattern(x, pattern_in = dna("TCAGCATT", "CCCCTG"),
                  pattern_out = dna("TGTTACA"))

# Pattern can be a regex.
#seq_crop_pattern(x, pattern_in = "A..A..A")

# Ambiguous patterns
x <- dna("ACGATTTTTTT")
seq_crop_pattern(x, pattern_in = dna("ACRA"),
                include_patterns = FALSE)

x <- dna("ACGAGTTTTTTCCCCCCC", "VACGAGTTTTTTCCCCCCC")
seq_crop_fuzzypattern(x,
                 pattern_in = dna("ACRAN"),
                 pattern_out = dna("CCCC", "GGGG"),
                 max_dist_in = 0,
                 max_dist_out = 0,
                 include_patterns = FALSE)


}
