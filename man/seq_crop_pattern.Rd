% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/seq_string_operation.R
\name{seq_crop_pattern}
\alias{seq_crop_pattern}
\title{Crop sequences using delimiting patterns}
\usage{
seq_crop_pattern(
  x,
  pattern_in,
  pattern_out,
  max_error_in = 0,
  max_error_out = 0,
  include_patterns = TRUE
)
}
\arguments{
\item{x}{a DNA, RNA or AA vector to be cropped.}

\item{pattern_in}{patterns defining the beginning (left-side).}

\item{pattern_out}{patterns defining the end (right-side).}

\item{max_error_in, max_error_out}{numeric values ranging from
0 to 1 and giving the maximum error rate allowed between the
target sequence and \code{pattern_in}/\code{pattern_out}.
Error rate is relative to the length of the pattern.}

\item{include_patterns}{logical. Should the matched pattern
sequence included in the returned sequences?}
}
\value{
A cropped DNA, RNA or AA vector.
Sequences where patterns are not detected returns \code{NA}.
}
\description{
Crop sequences using delimiting patterns
}
\section{Fuzzy matching}{

When \code{max_error_in} or \code{max_error_out} are greater
than zero, the function perform fuzzy matching.
Fuzzy matching does not support regular expression.
}

\section{Patterns}{

It is important to understand how patterns are treated in \pkg{bioseq}.

Patterns are recycled along the sequences (usually the \code{x} argument).
This means that if a pattern (vector or list) is of length > 1, it will be
replicated until it is the same length as \code{x}.
The reverse is not true and a vector of patterns longer than
a vector of sequences will raise a warning.

Patterns can be DNA, RNA or AA vectors
(but they must be from the same class as
the sequences they are matched against).
If patterns are DNA, RNA or AA vectors,
they are disambiguated prior to matching.
For example pattern dna("ARG") will match AAG or AGG.

Alternatively, patterns can be a simple character vector
containing regular expressions.

Vectors of patterns (DNA, RNA, AA or regex) can also be provided in a list.
In that case, each vector of the list will be collapsed prior matching,
which means that each vector element will be used as an alternative pattern.
For example pattern list(c("AAA", "CCC"), "GG")
will match AAA or CCC in the first sequence,
GG in the second sequence, AAA or CCC in the third,
and so on following the recycling rule.

 @section Fuzzy matching:
When \code{max_error} is greater than zero, the function perform
fuzzy matching. Fuzzy matching does not support regular expression.
}

\examples{

x <- dna("ACGTTAAAAAGTGTAGCCCCCGT", "CTCGAAATGA")
seq_crop_pattern(x, pattern_in = "AAAA", pattern_out = "CCCC")
}
\seealso{
\code{\link[stringi]{stri_extract}} from \pkg{stringi},
\code{\link[stringr]{str_extract}} from \pkg{stringr} and
\code{\link[stringdist]{afind}} from \pkg{stringdist}
for the underlying implementation.

Other string operations: 
\code{\link{seq-replace}},
\code{\link{seq_combine}()},
\code{\link{seq_count_pattern}()},
\code{\link{seq_crop_position}()},
\code{\link{seq_detect_pattern}()},
\code{\link{seq_extract_pattern}()},
\code{\link{seq_extract_position}()},
\code{\link{seq_remove_pattern}()},
\code{\link{seq_remove_position}()},
\code{\link{seq_replace_position}()},
\code{\link{seq_split_kmer}()},
\code{\link{seq_split_pattern}()}
}
\concept{string operations}
